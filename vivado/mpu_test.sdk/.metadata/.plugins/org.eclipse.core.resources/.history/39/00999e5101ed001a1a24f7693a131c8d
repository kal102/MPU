/*
 * km_axis.c
 *
 *  Created on: 28.08.2020
 *      Author: Kacper
 */
#include "km_axis.h"

void Load(unsigned int buffer, unsigned int indexA, unsigned int indexB, unsigned int rows, unsigned int columns, volatile unsigned int *a){
	unsigned int i;

	// Command
	putfsl(CMD_LOAD, 0);
	// Buffer A/B
	putfsl(buffer, 0);
	// Buffer A index
	putfsl(indexA, 0);
	// Buffer B index
	putfsl(indexB, 0);
	// Rows
	putfsl(rows, 0);
	// Columns
	putfsl(columns, 0);
	// Reserved
	putfsl(0, 0);
	// Data
	for(i=0; i<rows*columns-1; i++){
		putfsl(a[i], 0);
	}
	cputfsl(a[i], 0);
}

void Multiply(unsigned int indexA, unsigned int indexB){
	// Command
	putfsl(CMD_MULTIPLY, 0);
	// Buffer A/B
	putfsl(0, 0);
	// Buffer A index
	putfsl(0, 0);
	// Buffer B index
	putfsl(2, 0);
	// Bias
	putfsl(255, 0);
	putfsl(255, 0);
	putfsl(255, 0);
	putfsl(252, 0);
	// Activation
	putfsl(ACTIVATION_NONE, 0);
	// Pooling
	cputfsl(POOLING_NONE, 0);
}

u8 CompareResults(unsigned int rows, unsigned int columns, volatile unsigned int *a){
	register unsigned int x;
	unsigned i;
	u8 val;

	val=0;
	// Frame Type
	getfsl(x,  0);
	if(x != 1) val = 1;
	getfsl(x,  0);
	//if(x != 65539) val = 1;
	// Reserved
	// Rows
	// Reserved
	// Columns
	// Data
	for(i=0; i<rows*columns-1; i++){
		getfsl(x, 0);
		if(x != a[i]) val = 1;
	}
	return val;
}
